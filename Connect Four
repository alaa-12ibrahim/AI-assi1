import pygame
import sys
from pygame.locals import *
import random
import time


# Constants
WIDTH = 580
HEIGHT = 640
CELL_SIZE = 80
COLUMN_COUNT = 7
ROW_COUNT = 6
BG_COLOR = 	(9,24,51)
BUTTON=(231,6,138)
PLAYER_COLORS = [(10,189,198),	(231,6,138)]
WINDOW_SIZE = (WIDTH, HEIGHT)
CELL_SIZE_HALF = CELL_SIZE // 2
BOARD_WIDTH = CELL_SIZE * COLUMN_COUNT
BOARD_HEIGHT = CELL_SIZE * ROW_COUNT
BOARD_OFFSET_X = (WIDTH - BOARD_WIDTH) // 2
BOARD_OFFSET_Y = (HEIGHT - BOARD_HEIGHT) // 2
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# Initialize Pygame
pygame.init()
window = pygame.display.set_mode(WINDOW_SIZE)
pygame.display.set_caption("Connect Four")
background_image = pygame.image.load("background.png")
background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))
start = pygame.image.load("background.png")
start = pygame.transform.scale(start, (WIDTH, HEIGHT))

clock = pygame.time.Clock()



# Connect Four game class
class ConnectFour:
    def __init__(self):
        self.board = [[' ' for _ in range(COLUMN_COUNT)] for _ in range(ROW_COUNT)]
        self.current_player = 'X'
        self.winner = None

    def make_move(self, column):
        if self.winner or self.board[0][column] != ' ':
            return False

        for row in range(ROW_COUNT - 1, -1, -1):
            if self.board[row][column] == ' ':
                self.board[row][column] = self.current_player
                self.check_winner(row, column)
                self.current_player = 'O' if self.current_player == 'X' else 'X'
                return True
        return False
    

    def get_next_open_row(self, column):
        for row in range(ROW_COUNT - 1, -1, -1):
            if self.board[row][column] == ' ':
                return row
        return -1  # Column is full, no available row


    def check_winner(self, row, col):
        player = self.board[row][col]

        # Check horizontal
        for row in range(6):
            for col in range(4):
                if (self.board[row][col] ==player and
                        self.board[row][col] == self.board[row][col + 1] == self.board[row][col + 2] == self.board[row][
                            col + 3]

                ):
                    self.winner= player
                    return True

        # Check vertical
        for col in range(7):
            for row in range(3):
                if (self.board[row][col] ==player and
                        self.board[row][col] == self.board[row + 1][col] == self.board[row + 2][col] ==
                        self.board[row + 3][col]):
                    self.winner = player
                    return True

        # Check diagonal (top-left to bottom-right)
        for row in range(3):
            for col in range(4):
                if (self.board[row][col] ==player and
                        self.board[row][col] == self.board[row + 1][col + 1] == self.board[row + 2][col + 2] ==
                        self.board[row + 3][col + 3]):
                    self.winner=player
                    
                    return True

        # Check diagonal (top-right to bottom-left)
        for row in range(3):
            for col in range(3, 7):
                if (self.board[row][col] == player and
                        self.board[row][col] == self.board[row + 1][col - 1] == self.board[row + 2][col - 2] ==
                        self.board[row + 3][col - 3]):
                    self.winner=player
                    return True
        return False

    def is_board_full(self):
        for row in self.board:
            if ' ' in row:
                return False
        return True

    def reset(self):
        self.board = [[' ' for _ in range(COLUMN_COUNT)] for _ in range(ROW_COUNT)]
        self.current_player = 'X'
        self.winner = None

    def print_(self):
        for row in self.board:
            print('|'.join(row))
        print('---------------')
        print('1 2 3 4 5 6 7')

    def print(self):
        #print("Welcome to Connect Four!")
        print("Player 1: X | Player 2: O")
        print("-------------------------")
        self.print_()
        if self.winner is not None:
            print("The winner is")
            print(self.winner)
            
           
# Create the Connect Four game instance
game = ConnectFour()

# Function to draw the Connect Four board
def draw_board():
    window.blit(background_image, (0, 0))
    
    rectangle_color = 	(9,24,51)
    #pygame.draw.rect(window, rectangle_color, (BOARD_OFFSET_X, BOARD_OFFSET_Y, BOARD_WIDTH, BOARD_HEIGHT))
            #draw cells
    for row in range(ROW_COUNT):
        for col in range(COLUMN_COUNT):
            #pygame.draw.circle(window, BG_COLOR, (BOARD_OFFSET_X + col * CELL_SIZE + CELL_SIZE // 2, BOARD_OFFSET_Y + row * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 2 - 5)
            pygame.draw.circle(window, BG_COLOR, (BOARD_OFFSET_X + col * CELL_SIZE + CELL_SIZE // 2, HEIGHT - (BOARD_OFFSET_Y + (ROW_COUNT - row - 1) * CELL_SIZE + CELL_SIZE // 2)), CELL_SIZE // 2 - 5)

            if game.board[row][col] == 'X':
                pygame.draw.circle(window, PLAYER_COLORS[0], (BOARD_OFFSET_X + col * CELL_SIZE + CELL_SIZE // 2, BOARD_OFFSET_Y + row * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 2 - 5)
            elif game.board[row][col] == 'O':
                pygame.draw.circle(window, PLAYER_COLORS[1], (BOARD_OFFSET_X + col * CELL_SIZE + CELL_SIZE // 2, BOARD_OFFSET_Y + row * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 2 - 5)

# Function to handle events

def handle_events(t):


    draw_board()
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
    if t==0:
            
        if not game.winner:
            computer_move()
            draw_board()
            time.sleep(1)
            AI_minimax(4)
            draw_board()
    elif t==1:
        if not game.winner:
            computer_move()
            draw_board()
            time.sleep(1)
            AI_minimax(8)
            draw_board()
    elif t==2:
        if not game.winner:
            computer_move()
            draw_board()
            time.sleep(1)
            AI_alpha(4)
            draw_board()
    elif t==3:
        if not game.winner:
            computer_move()
            draw_board()
            time.sleep(1)
            AI_alpha(8)
            draw_board()
                    


def computer_move():
    if not game.winner:
        available_columns = [col for col in range(COLUMN_COUNT) if game.board[0][col] == ' ']
        if available_columns:
            column = random.choice(available_columns)
            game.make_move(column)

def AI_alpha(depth):
    if not game.winner:
        best_score = float('-inf')
        best_column = None

        for column in range(COLUMN_COUNT):
            if game.board[0][column] == ' ':
                row1 = game.get_next_open_row(column)
                game.make_move(column)
                d=depth
                score = minimaxa(game.board, depth, float('-inf'), float('inf'), False)
                game.winner = None
                game.board[row1][column] = ' '
                game.current_player = 'X' if game.current_player == 'O' else 'O'

                if score > best_score:
                    best_score = score
                    best_column = column
        game.make_move(best_column)
        draw_board()


def minimaxa(board, depth, alpha, beta, is_maximizing):
    if depth == 0 or game.winner:
        if game.winner == 'X':
            return -1
        elif game.winner == 'O':
            return 1
        else:
            return 0

    if is_maximizing:
        best_score = float('-inf')

        for column in range(COLUMN_COUNT):
            if board[0][column] == ' ':
                game.current_player = 'O'
                row = game.get_next_open_row(column)
                game.make_move(column)
                score = minimaxa(board, depth - 1, alpha, beta, False)
                board[row][column] = ' '
                best_score = max(score, best_score)
                alpha = max(alpha, best_score)
                if alpha >= beta:
                    break

        return best_score
    else:
        best_score = float('inf')

        for column in range(COLUMN_COUNT):
            if board[0][column] == ' ':
                game.current_player = 'X'
                row = game.get_next_open_row(column)
                game.make_move(column)
                score = minimaxa(board, depth - 1, alpha, beta, True)
                board[row][column] = ' '
                best_score = min(score, best_score)
                beta = min(beta, best_score)
                if alpha >= beta:
                    break

        return best_score
        
     def AI_minimax(depth):
    if not game.winner:
        best_score = float('-inf')
        best_column = None

        for column in range(COLUMN_COUNT):
            if game.board[0][column] == ' ':  #the top row to make sure its possible
                row1=game.get_next_open_row(column)
                game.make_move(column)
                d=depth
                score = minimax(game.board,depth, False)
                game.winner=None
                game.board[row1][column] = ' '
                game.current_player = 'X' if game.current_player == 'O' else 'O'

                if score > best_score:
                    best_score = score
                    best_column = column
        game.make_move(best_column)
        draw_board()


def minimax(board, depth, is_maximizing):
    if depth == 0 or game.winner:
        if game.winner == 'X':
            return -1
        elif game.winner == 'O':
            return 1
        else:
            return 0

    elif is_maximizing:
        best_score = float('-inf')

        for column in range(COLUMN_COUNT):
            if board[0][column] == ' ':
                #board[game.get_next_open_row(column)][column] = 'O'
                game.current_player = 'O'
                row=game.get_next_open_row(column)
                game.make_move(column)
                score = minimax(board, depth - 1, False)
                board[row][column] = ' '
                best_score = max(score, best_score)     

        return best_score
    else:
        best_score = float('inf')

        for column in range(COLUMN_COUNT):
            if board[0][column] == ' ':
                #board[game.get_next_open_row(column)][column] = 'X'
                game.current_player = 'X'
                row=game.get_next_open_row(column)
                game.make_move(column)
                score = minimax(board, depth - 1, True)
                board[row][column] = ' '
                best_score = min(score, best_score)
    
        return best_score
